# Sources:
# https://mozilla.github.io/server-side-tls/ssl-config-generator/
# Ansible: From Begineer to Pro
# https://www.owasp.org/index.php/SCG_WS_nginx#SSL_Module
# https://github.com/mail-in-a-box/mailinabox/tree/master/conf


# Improve privacy: Hide version an OS information on
# error pages and in the "Server" HTTP-Header.
server_tokens off;

# config to disallow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
# directives for css and js(if you have inline css or js, you will need to keep it too).
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://ssl.google-analytics.com https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://assets.zendesk.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'none'";

# Tell browsers to require SSL (warning: difficult to change your mind)
# Handled by the management daemon because we can toggle this version or a
# preload version.
#add_header Strict-Transport-Security max-age=31536000;

#worker_processes auto; # put in nginx.conf
#add_header Allow "GET, POST, HEAD" always; # this throws an error...

upstream php {
  server unix:/run/php/php7.1-fpm.sock;
}
server {
  server_name {{wp_domain}};
  root /var/www/{{wp_domain}};
  index index.php;

  keepalive_timeout   70;

  # enables server-side protection from BEAST attacks
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

  #~ ssl_certificate /path/to/signed_cert_plus_intermediates;
  #~ ssl_certificate_key /path/to/private_key;
  # Turn on session resumption, using a 10 min cache shared across nginx processes,
  # as recommended by http://nginx.org/en/docs/http/configuring_https_servers.html
  ssl_session_cache   shared:SSL:10m;
  ssl_session_timeout 10m;
  #~ ssl_session_tickets off;

  # OCSP Stapling ---
  # fetch OCSP records from URL in ssl_certificate and cache them
  #~ ssl_stapling on;
  #~ ssl_stapling_verify on;
  ## verify chain of trust of OCSP response using Root CA and Intermediate certs
  #~ ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;
  #~ resolver <IP DNS resolver>;
  #~ resolver_timeout 10;


  #~ ssl_buffer_size 1400;
  # Generate this: openssl dhparam -out dhparams.pem 4096
  ssl_dhparam /etc/nginx/ssl/dhparams.pem;

  if ( $request_method !~ ^(GET|POST|HEAD)$ ) {
    return 405;
  }
  #if ($http_user_agent ~* LWP::Simple|BBBike|wget) { # allow wget
  if ($http_user_agent ~* LWP::Simple|BBBike) {
    return 403;
  }

  location = /favicon.ico {
    log_not_found off;
    access_log off;
  }
  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }
  location ~ /\. {
    deny all;
  }
  location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
  }
  location / {
    try_files $uri $uri/ /index.php?$args;
  }

  rewrite /wp-admin$ $scheme://$host$uri/ permanent;

  location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
    access_log off;
    log_not_found off;
    expires max;
  }
  location ~ [^/]\.php(/|$) {
    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
    if (!-f $document_root$fastcgi_script_name) {
      return 404;
    }
    include fastcgi_params;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_pass php;
  }
  location /docs/ {
    deny  all;
  }

  # Disable viewing dotfiles (.htaccess, .svn, .git, etc.)
  # This block is placed at the end. Nginx's precedence rules means this block
  # takes precedence over all non-regex matches and only regex matches that
  # come after it (i.e. none of those, since this is the last one.) That means
  # we're blocking dotfiles in the static hosted sites but not the FastCGI-
  # handled locations (which serves user-uploaded files that might
  # have this pattern, see #414) or some of the other services.
  location ~ /\.(ht|svn|git|hg|bzr) {
    log_not_found off;
    access_log off;
    deny all;
  }
}
